load("C:/Users/om15701/Box/myBox/Teaching/MA331/W9-Text Mining/W9/www/trump_tweets.OM.RDATA")
load("C:/Osama_Mahmoud/Github-Local-Statcourses/dsEssex/data/trump_tweets.OM.RDATA")
load("C:/Osama_Mahmoud/Github-Local-Statcourses/dsEssex/data/Oct_Death.RDATA")
Oct_Death = PR_Oct_Deaths
PR_Oct_Deaths = Oct_Death
save(PR_Oct_Deaths, file = "PR_Oct_Deaths.RData")
load("C:/Osama_Mahmoud/Github-Local-Statcourses/dsEssex/data/trump_tweets_2021.RDATA")
Trump_tweets = trump_tweets_2021
save(Trump_tweets, file = "data/Trump_tweets.RData")
library(NHANES)
data(NHANES)
force(NHANES)
require(dplyr)
names(NHANES)
?NHANES
nhanes <- NHANES %>% select(ID, Gender, Age, AgeDecade, Education, MaritalStatus, HomeRooms,
HomeOwn, Weight, Height, BMI, BPSysAve, BPDiaAve, SleepTrouble,
Diabetes, DiabetesAge, Depressed, SleepHrsNight, SleepTrouble,
SmokeNow, SmokeAge)
save(nhanes, file = "nhanes.RData")
save(nhanes, file = "data/nhanes.RData")
load("C:/Osama_Mahmoud/Github-Local-Statcourses/dsEssex/data/lbw.RData")
View(lbw)
names(lbw)
sapply(lbw, class)
?NHANES
load("C:/Osama_Mahmoud/Github-Local-Statcourses/dsEssex/data/nhanes.RData")
View(nhanes)
names(nhanes)
load("~/R/win-library/3.6/NHANES/Meta/Rd.rds")
nsInfo <- readRDS("~/R/win-library/3.6/NHANES/Meta/nsInfo.rds")
nsInfo
Rd <- readRDS("C:/Users/om15701/OneDrive - University of Bristol/Documents/R/win-library/3.6/NHANES/Meta/Rd.rds")
Rd
features <- readRDS("C:/Users/om15701/OneDrive - University of Bristol/Documents/R/win-library/3.6/NHANES/Meta/features.rds")
features
View(nhanes)
system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf",
package="dslabs")
load("C:/Osama_Mahmoud/Github-Local-Statcourses/dsEssex/data/PR_Oct_Deaths.RData")
load("C:/Osama_Mahmoud/Github-Local-Statcourses/dsEssex/data/Trump_tweets.RData")
?trump_tweets
help(trump_tweets, package = "dslabs")
names(Trump_tweets)
require(SlopeHunter)
?slopehunter
library(learnr)
# library(gradethis)  # tried but not so great - convienent for this tutorial
# library(checkr)   # an alternative of gradethis - never tried
library(testwhat)  # tried - need more learning, looks amazing!
# remotes::install_github("rstudio-education/gradethis") ## to install gradethis
## to install checkr
# devtools::install_github("lionel-/redpen")
# devtools::install_github("dtkaplan/checkr")
## to install testwhat
# remotes::install_github("datacamp/testwhat")
knitr::opts_chunk$set(echo = TRUE, comment = NULL)
tutorial_options(exercise.cap = "MA331 Code",
exercise.timelimit = 60,
# exercise.checker = gradethis::grade_learnr,
exercise.checker = testwhat::testwhat_learnr,
exercise.diagnostics = TRUE)
require(dslabs)
require(dplyr)
require(stringr)
require(readr)
library(english)
library(tidyr)
data("reported_heights")
not_inches <- function(x, smallest = 50, tallest = 84){
inches = suppressWarnings(as.numeric(x))
ind = is.na(inches) | inches < smallest | inches > tallest  # logical vector: TRUE refers to a problematic entry
return(ind)
}
problems <- filter(reported_heights, not_inches(height)) %>%
pull(height)
require(tidyr)
?dslabs
require(dslabs)
?dslabs
help(package = "dslabs")
devtools::document()
devtools::build_vignettes()
build --resave-data
require(devtools)
?use_data
devtools::use_data()
?use_data
usethis::use_data()
load("data/lbw.RData")
save(lbw, file = "data/lbw.rda")
load("data/nhanes.RData")
save(lbw, file = "data/nhanes.rda")
load("data/nhanes.RData")
save(nhanes, file = "data/nhanes.rda")
load("data/PR_Oct_Deaths.RData")
load("data/PR_Oct_Deaths.RData")
save(PR_Oct_Deaths, file = "data/PR_Oct_Deaths.rda")
load("data/Trump_tweets.RData")
load("data/Trump_tweets.RData")
save(Trump_tweets, file = "data/Trump_tweets.rda")
devtools::document()
devtools::document()
load("data/lbw.rda")
View(lbw)
names(lbw)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_data(compress = "xz")
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
# devtools::build_vignettes()
usethis::use_data(compress = "xz")
# devtools::build_vignettes()
tools::resaveRdaFiles
# devtools::build_vignettes()
tools::resaveRdaFiles()
# devtools::build_vignettes()
tools::resaveRdaFiles("data/", compress = "xz")
usethis::use_package()
usethis::use_package("dslabs", "imports")
usethis::use_package("dslabs", "imports")
usethis::use_package(c("dslabs", "dplyr", "stringr"), "imports")
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
# devtools::build_vignettes()
tools::resaveRdaFiles("data/", compress = "xz")
devtools::build()
devtools::document()
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
for(i in My_packages){
usethis::use_package(package = i, type = "imports", min_version = TRUE)
}
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports", min_version = TRUE)
}
## document data
devtools::document()
## compress the dataset
tools::resaveRdaFiles("data/", compress = "xz")
## build the package
devtools::build()
## install it
#devtools::install(build_vignettes = TRUE)
devtools::install()
########
require(dsEssex)
data(lbw)
force(lbw)
?lbw
?dsEssex
#install.packages("/media/PhD/GitHub/essexBigdata_0.1.0.tar.gz", repos = NULL, type = "source")
library(essexBigdata)
?essexBigdata
help(package = essexBigdata)
?lbw
?trump_tweets
?Trump_tweets
?trump_tweets
?dslabs
?dsEssex
?Trump_tweets
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports", min_version = TRUE)
}
## document data
devtools::document()
## vignettes
# devtools::build_vignettes()
## compress the dataset
tools::resaveRdaFiles("data/", compress = "xz")
## build the package
devtools::build()
## install it
#devtools::install(build_vignettes = TRUE)
devtools::install()
######## Testing ########
require(dsEssex)
######## Testing ########
require(dsEssex)
data(lbw)
######## Testing ########
require(dsEssex)
data(lbw); data(Trump_tweets)
force(Trump_tweets)
force(lbw)
data("PR_Oct_Deaths")
data(lbw); data(Trump_tweets); data(PR_Oct_Deaths); data(nhanes)
force(nhanes)
?lbw; ?nhanes; ?PR_Oct_Deaths; ?Trump_tweets
help(package = dsEssex)
system.file("extdata", "RD-Mortality.pdf", package="dsEssex")
system.file("extdata", "PR-Mortality.pdf", package="dsEssex")
system.file("R", "datasets.R", package="dsEssex")
######## Testing ########
install.packages("drat")
install.packages("drat")
drat::addRepo("statcourses")
install.packages("dsEssex")
install.packages("dsEssex")
install.packages("BristolVis")
drat::addRepo("statcourses")
install.packages("dsEssex")
install.packages("BristolVis")
install.packages("dsEssex")
remove.packages("dsEssex", lib="~/R/win-library/3.6")
######## Testing ########
install.packages("drat")
install.packages("drat")
drat::addRepo("statcourses")
install.packages("dsEssex")
install.packages("essexBigdata")
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## compress the dataset
tools::resaveRdaFiles("data/", compress = "xz")
## build the package
devtools::build()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## compress the dataset
tools::resaveRdaFiles("data/", compress = "xz")
## build the package
devtools::build()
######## Testing ########
install_github("statcourses/dsEssex")
devtools::install_github("statcourses/dsEssex")
devtools::install_github("statcourses/dsEssex")
devtools::install_github("statcourses/BristolVis")
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## build the package
devtools::build()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## build the package
devtools::build()
devtools::install_github("statcourses/dsEssex")
devtools::install_github("statcourses/dsEssex", ref = "main")
install.packages("drat")
drat::addRepo("statcourses")
install.packages("dsEssex")
help(package = dsEssex)
# ?lbw; ?nhanes; ?PR_Oct_Deaths; ?Trump_tweets
# vignette("NAME", package = "dsEssex")
system.file("extdata", "PR-Mortality.pdf", package="dsEssex")
?dsEssex
help(package = "dsEssex")
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", fig.path = "README-")
# load data of Donald Trump's tweets from 2009 to 2021
data(Trump_tweets)
?Trump_tweets
# load the package into your R session
require(dsEssex)
?Trump_tweets
# display description of the data
help(Trump_tweets)
# load the index page that lists all the components of the package
help(dsEssex)
# load the index page that lists all the components of the package
help(package = dsEssex)
help(package = dslabs)
help(package = dslabs)
help(package = dsEssex)
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## compress the dataset
tools::resaveRdaFiles("data/", compress = "xz")
## build the package
devtools::build()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## compress the dataset
tools::resaveRdaFiles("data/", compress = "xz")
## build the package
devtools::build()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## compress the dataset
tools::resaveRdaFiles("data/", compress = "xz")
## build the package
devtools::build()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## vignettes
## document data
devtools::document()
## document data
devtools::document()
## document data
devtools::document()
## document data
devtools::document()
## document data
devtools::document()
## document data
devtools::document()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("plotly")
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
load(file = "data/med.RData")
save(med, file = "data/med.rda")
load(file = "data/bmov.RData")
save(med, file = "data/bmov.rda")
save(bmov, file = "data/bmov.rda")
load(file = "data/birthweight.RData")
load(file = "data/birthweight.RData")
save(birthweight, file = "data/birthweight.rda")
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "plotly",
"ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
My_Depends <- c("plotly")
for(j in My_Depends){
usethis::use_package(package = j, type = "Depends")
}
## document data
devtools::document()
## Adding the imports to the Description file automatically
My_packages <- c("dslabs", "dplyr", "stringr", "ggplot2", "tidytext", "textdata",
"english", "tidyr", "jsonlite", "lubridate", "scales", "ggcorrplot")
for(i in My_packages){
usethis::use_package(package = i, type = "imports")
}
My_Depends <- c("plotly")
for(j in My_Depends){
usethis::use_package(package = j, type = "Depends")
}
## document data
devtools::document()
